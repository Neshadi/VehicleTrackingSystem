// pipeline {
//     agent any

//     tools {
//         nodejs 'nodejs'  // This name should match the name you gave it in the Global Tool Configuration
//     }

//     stages {
//         stage('Checkout') {
//             steps {
//                 // Checkout the code from your GitHub repository
//                 git url: 'https://github.com/Neshadi/VehicleTrackingSystem.git', branch: 'master'
//             }
//         }

//         stage('Install Dependencies') {
//             steps {
//                 // Install the project dependencies using npm
//                 sh 'npm install'  // Or use 'yarn install' if you're using yarn
//             }
//         }

//         stage('Build') {
//             steps {
//                 // Build the React app
//                 sh 'npm run build'  // This will create the production build
//             }
//         }

//         stage('Test') {
//             steps {
//                 // Run tests (you can adjust for your testing framework)
//                 sh 'npm test'  // Or use 'yarn test' if you're using yarn
//             }
//         }

//         stage('Deploy') {
//             steps {
//                 // Add deployment logic here if needed
//                 echo 'Deploying application...'
//             }
//         }
//     }

//     post {
//         success {
//             echo 'Build and deployment successful!'
//         }
//         failure {
//             echo 'Build or deployment failed!'
//         }
//     }
// }

pipeline {
    agent { label 'windows' } 
     
    stages { 
        stage('SCM Checkout') {
            steps {
                retry(3) {
                    git branch: 'master', url: 'https://github.com/Neshadi/VehicleTrackingSystem.git'
                }
            }
        }

        stage('Build and Push Docker Images') {
            steps {  
                script {
                    // Build first image (server) without version tag
                    bat "docker build -t hirunika/server-image -f Dockerfileserver ."

                    // Build second image (client) without version tag
                    bat "docker build -t hirunika/client-image -f Dockerfileclient ."
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([string(credentialsId: 'test-dockerpass', variable: 'test-dockerpass')]) {
                    script {
                        bat "docker login -u hirunika -p %test-dockerpass%"
                    }
                }
            }
        }

        stage('Push Image') {
            steps {
                script {
                    // Push images without version tag
                    bat "docker push hirunika/server-image"
                    bat "docker push hirunika/client-image"
                }
            }
        }
    }

    post {
        always {
            bat 'docker logout'
        }
    }
}
